{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../ui/Button\";\nimport Input from \"./Input\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AuthForm(_ref) {\n  var isLogin = _ref.isLogin,\n    onSubmit = _ref.onSubmit,\n    credentialsInvalid = _ref.credentialsInvalid;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredEmail = _useState2[0],\n    setEnteredEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    enteredConfirmEmail = _useState4[0],\n    setEnteredConfirmEmail = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    enteredPassword = _useState6[0],\n    setEnteredPassword = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    enteredConfirmPassword = _useState8[0],\n    setEnteredConfirmPassword = _useState8[1];\n  var emailIsInvalid = credentialsInvalid.email,\n    emailsDontMatch = credentialsInvalid.confirmEmail,\n    passwordIsInvalid = credentialsInvalid.password,\n    passwordsDontMatch = credentialsInvalid.confirmPassword;\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword\n    });\n  }\n  return _jsx(View, {\n    style: styles.form,\n    children: _jsxs(View, {\n      children: [_jsx(Input, {\n        label: \"Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'email'),\n        value: enteredEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmEmail'),\n        value: enteredConfirmEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailsDontMatch\n      }), _jsx(Input, {\n        label: \"Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'password'),\n        secure: true,\n        value: enteredPassword,\n        isInvalid: passwordIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmPassword'),\n        secure: true,\n        value: enteredConfirmPassword,\n        isInvalid: passwordsDontMatch\n      }), _jsx(View, {\n        style: styles.buttons,\n        children: _jsx(Button, {\n          onPress: submitHandler,\n          children: isLogin ? 'Log In' : 'Sign Up'\n        })\n      })]\n    })\n  });\n}\nexport default AuthForm;\nvar styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12\n  }\n});","map":{"version":3,"names":["useState","Button","Input","AuthForm","isLogin","onSubmit","credentialsInvalid","enteredEmail","setEnteredEmail","enteredConfirmEmail","setEnteredConfirmEmail","enteredPassword","setEnteredPassword","enteredConfirmPassword","setEnteredConfirmPassword","emailIsInvalid","email","emailsDontMatch","confirmEmail","passwordIsInvalid","password","passwordsDontMatch","confirmPassword","updateInputValueHandler","inputType","enteredValue","submitHandler","styles","form","bind","buttons","StyleSheet","create","marginTop"],"sources":["T:/Online Courses/React Native - The Practical Guide. Maximilian Schwarzm√ºller/authentication/components/Auth/AuthForm.js"],"sourcesContent":["import { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport Button from '../ui/Button';\nimport Input from './Input';\n\nfunction AuthForm({ isLogin, onSubmit, credentialsInvalid }) {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredConfirmEmail, setEnteredConfirmEmail] = useState('');\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState('');\n\n  const {\n    email: emailIsInvalid,\n    confirmEmail: emailsDontMatch,\n    password: passwordIsInvalid,\n    confirmPassword: passwordsDontMatch,\n  } = credentialsInvalid;\n\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword,\n    });\n  }\n\n  return (\n    <View style={styles.form}>\n      <View>\n        <Input\n          label=\"Email Address\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'email')}\n          value={enteredEmail}\n          keyboardType=\"email-address\"\n          isInvalid={emailIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Email Address\"\n            onUpdateValue={updateInputValueHandler.bind(this, 'confirmEmail')}\n            value={enteredConfirmEmail}\n            keyboardType=\"email-address\"\n            isInvalid={emailsDontMatch}\n          />\n        )}\n        <Input\n          label=\"Password\"\n          onUpdateValue={updateInputValueHandler.bind(this, 'password')}\n          secure\n          value={enteredPassword}\n          isInvalid={passwordIsInvalid}\n        />\n        {!isLogin && (\n          <Input\n            label=\"Confirm Password\"\n            onUpdateValue={updateInputValueHandler.bind(\n              this,\n              'confirmPassword'\n            )}\n            secure\n            value={enteredConfirmPassword}\n            isInvalid={passwordsDontMatch}\n          />\n        )}\n        <View style={styles.buttons}>\n          <Button onPress={submitHandler}>\n            {isLogin ? 'Log In' : 'Sign Up'}\n          </Button>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthForm;\n\nconst styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}