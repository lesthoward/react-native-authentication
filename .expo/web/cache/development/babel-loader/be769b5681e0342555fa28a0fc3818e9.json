{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatButton from \"../ui/FlatButton\";\nimport AuthForm from \"./AuthForm\";\nimport { Colors } from \"../../constants/styles\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AuthContent(_ref) {\n  var isLogin = _ref.isLogin,\n    onAuthenticate = _ref.onAuthenticate;\n  var navigation = useNavigation();\n  var _useState = useState({\n      email: false,\n      password: false,\n      confirmEmail: false,\n      confirmPassword: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    credentialsInvalid = _useState2[0],\n    setCredentialsInvalid = _useState2[1];\n  function switchAuthModeHandler() {\n    if (isLogin) {\n      navigation.replace('Signup');\n    } else {\n      navigation.replace('Login');\n    }\n  }\n  function submitHandler(credentials) {\n    var email = credentials.email,\n      confirmEmail = credentials.confirmEmail,\n      password = credentials.password,\n      confirmPassword = credentials.confirmPassword;\n    email = email.trim();\n    password = password.trim();\n    var emailIsValid = email.includes('@');\n    var passwordIsValid = password.length > 6;\n    var emailsAreEqual = email === confirmEmail;\n    var passwordsAreEqual = password === confirmPassword;\n    if (!emailIsValid || !passwordIsValid || !isLogin && (!emailsAreEqual || !passwordsAreEqual)) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual\n      });\n      return;\n    }\n    onAuthenticate({\n      email: email,\n      password: password\n    });\n  }\n  return _jsxs(View, {\n    style: styles.authContent,\n    children: [_jsx(AuthForm, {\n      isLogin: isLogin,\n      onSubmit: submitHandler,\n      credentialsInvalid: credentialsInvalid\n    }), _jsx(View, {\n      style: styles.buttons,\n      children: _jsx(FlatButton, {\n        onPress: switchAuthModeHandler,\n        children: isLogin ? 'Create a new user' : 'Log in instead'\n      })\n    })]\n  });\n}\nexport default AuthContent;\nvar styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 1,\n      height: 1\n    },\n    shadowOpacity: 0.35,\n    shadowRadius: 4\n  },\n  buttons: {\n    marginTop: 8\n  }\n});","map":{"version":3,"names":["useState","FlatButton","AuthForm","Colors","useNavigation","AuthContent","isLogin","onAuthenticate","navigation","email","password","confirmEmail","confirmPassword","credentialsInvalid","setCredentialsInvalid","switchAuthModeHandler","replace","submitHandler","credentials","trim","emailIsValid","includes","passwordIsValid","length","emailsAreEqual","passwordsAreEqual","Alert","alert","styles","authContent","buttons","StyleSheet","create","marginTop","marginHorizontal","padding","borderRadius","backgroundColor","primary800","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius"],"sources":["T:/Online Courses/React Native - The Practical Guide. Maximilian SchwarzmÃ¼ller/authentication/components/Auth/AuthContent.js"],"sourcesContent":["import { useState } from 'react';\nimport { Alert, StyleSheet, View } from 'react-native';\n\nimport FlatButton from '../ui/FlatButton';\nimport AuthForm from './AuthForm';\nimport { Colors } from '../../constants/styles';\nimport { useNavigation } from '@react-navigation/native';\n\nfunction AuthContent({ isLogin, onAuthenticate }) {\n  const navigation = useNavigation();\n  const [credentialsInvalid, setCredentialsInvalid] = useState({\n    email: false,\n    password: false,\n    confirmEmail: false,\n    confirmPassword: false,\n  });\n\n  function switchAuthModeHandler() {\n    if(isLogin) {\n      navigation.replace('Signup');\n    } else {\n      navigation.replace('Login');\n    }\n  }\n\n  function submitHandler(credentials) {\n    let { email, confirmEmail, password, confirmPassword } = credentials;\n\n    email = email.trim();\n    password = password.trim();\n\n    const emailIsValid = email.includes('@');\n    const passwordIsValid = password.length > 6;\n    const emailsAreEqual = email === confirmEmail;\n    const passwordsAreEqual = password === confirmPassword;\n\n    if (\n      !emailIsValid ||\n      !passwordIsValid ||\n      (!isLogin && (!emailsAreEqual || !passwordsAreEqual))\n    ) {\n      Alert.alert('Invalid input', 'Please check your entered credentials.');\n      setCredentialsInvalid({\n        email: !emailIsValid,\n        confirmEmail: !emailIsValid || !emailsAreEqual,\n        password: !passwordIsValid,\n        confirmPassword: !passwordIsValid || !passwordsAreEqual,\n      });\n      return;\n    }\n    onAuthenticate({ email, password });\n  }\n\n  return (\n    <View style={styles.authContent}>\n      <AuthForm\n        isLogin={isLogin}\n        onSubmit={submitHandler}\n        credentialsInvalid={credentialsInvalid}\n      />\n      <View style={styles.buttons}>\n        <FlatButton onPress={switchAuthModeHandler}>\n          {isLogin ? 'Create a new user' : 'Log in instead'}\n        </FlatButton>\n      </View>\n    </View>\n  );\n}\n\nexport default AuthContent;\n\nconst styles = StyleSheet.create({\n  authContent: {\n    marginTop: 64,\n    marginHorizontal: 32,\n    padding: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.primary800,\n    elevation: 2,\n    shadowColor: 'black',\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.35,\n    shadowRadius: 4,\n  },\n  buttons: {\n    marginTop: 8,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}